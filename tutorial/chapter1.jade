.step(data-title='Introduction')
  :markdown
    ## How It Works

    Ready to implement appointment reminders in your application? Here's how it works at a high level:

      1. An administrator (our user) creates an appointment for a future date and time, and stores a customer's phone number in the database for that appointment
      1. When that appointment is saved a background task is scheduled to send a reminder to that customer before their appointment starts
      1. At a configured time in advance of the appointment, the background task sends an SMS reminder to the customer to remind them of their appointment

    ## Building Blocks

    Here are the technologies we'll use to get this done:

    * [Django](https://www.djangoproject.com/) to create a database-driven web application
    * [The Messages Resource](/docs/api/rest/sending-sms) from Twilio's REST API to send text messages
    * [Celery](http://www.celeryproject.org/) to help us schedule and execute background tasks on a recurring basis

    ## How To Read This Tutorial

    To implement appointment reminders, we will be working through a series of [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully implement appointment reminders in a web application. We'll walk through the code required to satisfy each story, and explore what we needed to add at each step.

    Let's get started! Click the right arrow to move on to the next step of the tutorial.

.step(data-title="About This Tutorial", data-file="requirements.txt")
  :markdown
    ## About This Tutorial

    In this tutorial, we will be working through a series of [user stories](http://en.wikipedia.org/wiki/User_story) that describe how to fully implement account verification in a web application. Our team implemented this example application in about 12 story points (roughly equivalent to 12 working hours).

    **A note about tools**

    We're building this app for Django 1.8 on Python 3.4, but all our code works in Python 2.7 too. We're big fans of [Two Scoops of Django](http://twoscoopspress.org/products/two-scoops-of-django-1-8) and we will use many best practices outlined there.

    In addition to Celery, we will use a few other Python libraries to make our task easier:

    - The [twilio-python](https://github.com/twilio/twilio-python) Python helper library
    - [django-bootstrap3](https://github.com/dyve/django-bootstrap3) and [django-forms-bootstrap](https://github.com/pinax/django-forms-bootstrap) to make our form HTML simpler and prettier
    - The fantastic [arrow](http://crsmithdev.com/arrow/) library to make our datetime math easier

    We will also use [PostgreSQL](http://www.postgresql.org/) for our database and [Redis](http://redis.io/) as our [Celery message broker](http://docs.celeryproject.org/en/latest/getting-started/brokers/index.html).

    Now let's get started with our first user story: creating a new user account.

.step(data-title='The User Story')
  h2 Creating an Appointment
  blockquote 
    | As a user, I want to create an appointment with a name, guest phone numbers, and a time in the future.
  :markdown
    In order to build an automated appointment reminder app, we probably should start with an appointment. This story requires that we create a bit of UI and a model object to create and save a new `Appointment` in our system. At a high level, here's what we will need to add:

    * An HTML form to enter details about the appointment
    * A view to render our form and accept POST data from it
    * An `Appointment` model to store information we need to send the reminder

    Let's start by looking at the model, where we decide what information we want to store with the appointment.

.step(data-title='The Appointment model', data-file="reminders/models.py", data-highlight='11-21', data-language="python")
  :markdown
    ## The Appointment Model

    We only need to store three pieces of data about each appointment to send a reminder:
    - The customer's name
    - Their phone number
    - The date and time of their appointment

    That translates into a pretty simple Django model. The `name` and `phone_number` fields are [CharFields](https://docs.djangoproject.com/en/1.8/ref/models/fields/#charfield) and the `time` field is a [DateTime](https://docs.djangoproject.com/en/1.8/ref/models/fields/#datetimefield) field.

    We also included two additional fields: `task_id` and `created`. The `task_id` field will help us keep track of the corresponding reminder task for this appointment. The `created` field is just a timestamp populated when an appointment is created.

    Finally, we defined a `__str__` method to tell Django how to represent instances of our model as text. This method uses the primary key and the customer's name to create a readable representation of an appointment.

    **Python 2/3 Compatibility**

    To keep our project compatible with Python 2, we use the `python_2_unicode_compatible` decorator on our model.

    This decorator tells Django to use our model's `__str__` method to provide a `__unicode__` method when running under Python 2.

    You can read more about it in the [Porting to Python 3](https://docs.djangoproject.com/en/1.8/topics/python3/#str-and-unicode-methods) section of the Django documentation.

.step(data-title='Migrations and the Django Admin', data-file='reminders/admin.py', data-language="python")
  :markdown
    ## Migrations and the Django Admin

    To create a table for our new model in our Postgres database, we need to make a [migration](https://docs.djangoproject.com/en/1.8/topics/migrations/).

    Our `Appointment` model lives in an app we called `reminders`, so the `manage.py` command is:

    ```
    $ python manage.py makemigrations reminders
    ```

    To apply the migration, first make sure your local Postgres database is running ([Postgres.app](http://postgresapp.com/) is an easy way to run Postgres on a Mac). Then run:

    ```
    $ python manage.py migrate
    ```

    Django's built-in admin is a convenient tool for playing with newly declared models.

    To wire up our `Appointment` model with the Django admin, just add this simple `admin.py` alongside your `models.py`.

    Before you can log in to the Django admin, you need to create a superuser for yourself. You can do that with:

    ```
    $ python manage.py createsuperuser
    ```

    Now if you start your development server with `python manage.py runserver`, you can create and update new `Appointment` objects through the `/admin` interface.

.step(data-title='New appointment view', data-file="reminders/views.py", data-highlight='16-19', data-language="python")
  :markdown
    ## New appointment view

    The next step in getting our `Appointment` model out to the world is writing a view.

    Django lets developers write views as [functions](https://docs.djangoproject.com/en/1.8/topics/http/views/) or [classes](https://docs.djangoproject.com/en/1.8/topics/class-based-views/).

    Class-based views are great when your views need to support simple, [CRUD-like](http://en.wikipedia.org/wiki/Create,_read,_update_and_delete) features - perfect for our appointments app.

    To make a view for creating new `Appointment` objects, we'll use Django's generic [CreateView](https://docs.djangoproject.com/en/1.8/ref/class-based-views/generic-editing/#django.views.generic.edit.CreateView) class.

    All we need to specify is the model it should use and what fields it should include. We don't even need to declare a form - Django will use a [ModelForm](https://docs.djangoproject.com/en/1.8/topics/forms/modelforms/#modelform) for us behind the scenes.

    **Success messages**

    Our view is ready to go with just those first three lines of code, but we'll make it a little better by adding the [SuccessMessageMixin](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/#adding-messages-in-class-based-views).

    This mixin tells our view to pass the `success_message` property of our class to the [Django messages framework](https://docs.djangoproject.com/en/1.8/ref/contrib/messages/) after a successful creation. We will display those messages to the user in our template.

.step(data-title='Wiring up the URLs', data-file='reminders/urls.py', data-highlight='11-12', data-language="python")
  :markdown
    ## Wiring up the URLs

    Now that we have a view to create new appointments, we need to add a new URL to our URL dispatcher so users can get to it.

    First, we'll add an entry in our Django project's root `urls.py` module to map all requests to URLs that start with `appointments` to the `urls.py` module in the `reminders` app directory:

    ```python
    from django.conf.urls import include

    url(r'^appointments', include('reminders.urls')),
    ```

    Then we can add a URL for creating new appointments to our `reminders/urls.py` module.

    We'll first create a new URL to handle requests to `/new`. We can connect that URL with our view by importing `AppointmentCreateView` from our `views` module and passing it as the second parameter of our URL declaration with `AppointmentCreateView.as_view()`.

.step(data-title='New appointment form', data-file='templates/reminders/appointment_form.html', data-language='html')
  :markdown
    ## New appointment form

    The last piece we need to let our users create new appointments is the HTML form.

    Our form template inherits from our base template, which you can check out at `templates/base.html`.

    We're using [Bootstrap](http://getbootstrap.com/) for the front end of our app, and we use the [django-forms-bootstrap](https://github.com/pinax/django-forms-bootstrap) library to help us render our form in our template with the `|as_bootstrap_horizontal` template filter.



.step(data-title='Adding Routes', data-file='requirements.txt')
  :markdown
    ## Routes

    In a Rails application, [Resource Routing](http://guides.rubyonrails.org/routing.html#resource-routing-the-rails-default) automatically maps a resource's CRUD capabilities to its controller. Since our `Appointment` is an ActiveRecord resource, we can simply tell Rails that we want to use these routes, which will save us some lines of code.

    This means that in this one line of code we automatically have an `appointment/new` route which will automatically render our `appointment/new.html.erb` file. Let's take a look at this form up close.

.step(data-title='New Appointment Form', data-file='requirements.txt', data-language='htmlembedded')
  :markdown
    ## New Appointment Form

    When we create a new appointment, we need a guest name, a phone number and a time. By using the rails `form_for` tag we can bind the form to the model object. This will generate the necessary html markup that will create a new Appointment on submit.

    Let's point out one specific helper tag that Rails gives us for model-bound forms.

.step(data-title='New Appointment Form', data-file='requirements.txt', data-language='htmlembedded', data-highlight="32-45")
  :markdown
    ## Date and Time

    One potential time-suck is figuring out how to handle the date and time of the appointment. In reality this is two separate user inputs, one for the day and one for the time of the appointment. We need a way to combine these two separate inputs into one paramater on the server-side. Again Rails handles this by giving us the `select_data` and `select_time` tags which the server automatically gathers into one paramater that maps to the `appointment.time` property.

    Let's jump back over to the controller to see what happens when we create this appointment.

.step(data-title='Handling the Form POST', data-file='requirements.txt', data-highlight='28-43')
  :markdown
    ## Handling the Form POST

    One of the other handy controllers created by our `Appointment` resource route was `appointment/create` which handles the POST from our form.

    In our controller we take the input from our form and create a new `Appointment` model. If the appointment is saved to the database successfully, we redirect to the appointment details view which will show the creator the new appointment and allow them to edit or delete it.

    Next we're going to take a look at the generated controllers for edit and delete.